//structural
module full_adder(sum, carry,a,b,c); 
 input a,b,c; 
 output sum, carry; 
 wire S,C2,C1; 
 half_adder_structural HA1(S,C1,a,b); 
 half_adder_structural HA2(sum,C2,S,c); 
 or (carry, C1,C2); 
endmodule

// Data flow 
module full_adder_df(sum,carry,a,b,c); 
 input a,b,c; 
 output sum,carry; 
 assign sum=a^b^c; 
 assign carry=(a&b)|(b&c)|(c&a); 
endmodule 

//Behavioral 
module full_adder_b(sum,carry,a,b,c); 
 input a,b,c; 
 output reg sum,carry; 
 always@(a | b | c) 
 begin 
 case({a,b,c}) 
 3'b000:begin sum=0; carry=0;end 
 3'b001:begin sum=1; carry=0;end 
 3'b010:begin sum=1; carry=0;end 
 3'b011:begin sum=0; carry=1;end 
 3'b100:begin sum=1; carry=0;end 
 3'b101:begin sum=0; carry=1;end 
 3'b110:begin sum=0; carry=1;end 
 3'b111:begin sum=0; carry=0;end 
 endcase 
 end 
endmodule
